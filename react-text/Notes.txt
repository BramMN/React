React is a Javascript library for building interfaces.
React is all about components. All user interfaces are made up of components. Components are resuable building blocks in your user interface. Combination of HTML/CSS/JS.
Why components? Reusable, don't repeat yourself constantly. Separation of concerns, don't do too many things in one and the same place.
Split big chunks of code into multiple smaller functions.

React is all about combining HTML, CSS and JS. React allows you to create re-usable and reactive components consisting of HTML, CSS, JS.
In react you define the desired target state(s) and let React figure out the actual Javascript DOM instructions. You use a declarative approach.

JSX = Javascript XML.
A component in React is just a Javascript function.
Props has the following idea: pass data into our components to make them configurable and reusable.

useState is a hook that returns an array of two elements. One mutable variable and a function to change the variable. It is used when certain input tells React the page needs to be updated.
two-way binding: for inputs we don't just listen to changes but also pass a new value back into the input. So you can reset or change the input.

Portals change the order of rendering the DOM.
Refs are wraps.

useEffect is a hook that is a function that takes two parameters: a function and an array of dependencies. Every time one of the dependencies change, the function is run.
Debouncing is waiting to run useEffect after the user pauses, instead of on every keystroke.
You can return a 'cleanup' function in useEffect: return () => {}, this functionruns before the function above it is run in useEffect. helpful for resetting timers for example.